start returns [ int v, boolean isZero]
            : mulDiv addSub_[{mulDiv.v}]
              {$v = addSub_.v;}
              {$isZero = $v == 0;}
            ;

addSub_[int left] returns [int v]
            : ADD mulDiv    {int next = left + mulDiv.v;}
              addSub_[next] {$v = addSub_.v;}
            | SUB mulDiv    {int next = left - mulDiv.v;}
              addSub_[next] {$v = addSub_.v;}
            | {$v = left;}
            ;

mulDiv returns[int v] : pow mulDiv_[{pow.v}] {$v = mulDiv_.v;};

mulDiv_[int left] returns [int v]
            : MUL pow mulDiv_[{left * pow.v}] {$v = mulDiv_.v;}
            | DIV pow mulDiv_[{left / pow.v}] {$v = mulDiv_.v;}
            | {$v = left;}
            ;

pow returns [int v] : unary pow_[{unary.v}] {$v = pow_.v;};

pow_[int left] returns [int v]
            : POW unary pow_[{(int) Math.pow(left, unary.v)}] {$v = pow_.v;}
            | {$v = left;}
            ;

unary returns [int v]
            : OP start CP {$v = start.v;}
            | NUM          {$v = Integer.valueOf(NUM);}
            ;

ADD = "+";
SUB = "-";
MUL = "*";
DIV = "/";
POW = "^";
OP = "(";
CP = ")";
NUM : "([1-9][0-9]*)|(0)";
WS -> "[ \n\r\t]+";